#!/usr/bin/env node

/**
 * Script d'installation des donn√©es de d√©monstration
 */

import { drizzle } from 'drizzle-orm/node-postgres';
import { eq } from 'drizzle-orm';
import pg from 'pg';
import bcrypt from 'bcryptjs';
import { users, establishments, courses, enrollments, assessments, studyGroups, notifications } from '../shared/schema.js';
import { config } from 'dotenv';

config();

const { Pool } = pg;

async function seedDemoData() {
    console.log('üìö Installation des donn√©es de d√©monstration...');
    console.log('=' .repeat(50));

    if (process.env.INSTALL_DEMO_DATA !== 'true') {
        console.log('‚ÑπÔ∏è Donn√©es de d√©monstration d√©sactiv√©es dans la configuration');
        return;
    }

    if (!process.env.DATABASE_URL) {
        console.error('‚ùå Variable DATABASE_URL requise dans .env');
        process.exit(1);
    }

    let client;
    try {
        const pool = new Pool({
            connectionString: process.env.DATABASE_URL,
        });
        
        client = await pool.connect();
        const db = drizzle(client);

        // V√©rifier si des donn√©es de d√©mo existent d√©j√†
        const existingEstablishments = await db
            .select()
            .from(establishments)
            .where(eq(establishments.slug, 'demo-academy'));

        if (existingEstablishments.length > 0) {
            console.log('‚ö†Ô∏è Donn√©es de d√©monstration d√©j√† pr√©sentes');
            return;
        }

        console.log('üè¢ Cr√©ation des √©tablissements de d√©monstration...');
        
        // Cr√©er des √©tablissements de d√©monstration
        const demoEstablishments = [
            {
                name: 'StacGate Academy',
                slug: 'demo-academy',
                description: '√âcole de formation professionnelle en d√©veloppement web',
                domain: 'stacgate.academy',
                isActive: true,
                settings: {
                    theme: 'purple',
                    language: 'fr',
                    timezone: 'Europe/Paris',
                    allowRegistration: true
                }
            },
            {
                name: 'TechPro Institute',
                slug: 'techpro-institute',
                description: 'Institut sp√©cialis√© en technologies avanc√©es',
                domain: 'techpro.institute',
                isActive: true,
                settings: {
                    theme: 'blue',
                    language: 'fr',
                    timezone: 'Europe/Paris',
                    allowRegistration: false
                }
            },
            {
                name: 'Digital Learning Center',
                slug: 'digital-learning',
                description: 'Centre de formation continue en num√©rique',
                domain: 'digital-learning.edu',
                isActive: true,
                settings: {
                    theme: 'green',
                    language: 'fr',
                    timezone: 'Europe/Paris',
                    allowRegistration: true
                }
            }
        ];

        const createdEstablishments = [];
        for (const est of demoEstablishments) {
            const [created] = await db.insert(establishments).values(est).returning();
            createdEstablishments.push(created);
        }

        console.log(`‚úÖ ${createdEstablishments.length} √©tablissements cr√©√©s`);

        console.log('üë• Cr√©ation des utilisateurs de d√©monstration...');
        
        // Cr√©er des utilisateurs de d√©monstration
        const demoUsers = [
            {
                establishmentId: createdEstablishments[0].id,
                email: 'admin@stacgate.academy',
                username: 'admin_stacgate',
                firstName: 'Jean',
                lastName: 'Administrateur',
                role: 'admin',
                password: 'demo123'
            },
            {
                establishmentId: createdEstablishments[0].id,
                email: 'marie.formateur@stacgate.academy',
                username: 'marie_formateur',
                firstName: 'Marie',
                lastName: 'Formatrice',
                role: 'formateur',
                password: 'demo123'
            },
            {
                establishmentId: createdEstablishments[0].id,
                email: 'paul.formateur@stacgate.academy',
                username: 'paul_formateur',
                firstName: 'Paul',
                lastName: 'Instructeur',
                role: 'formateur',
                password: 'demo123'
            },
            {
                establishmentId: createdEstablishments[0].id,
                email: 'sophie.apprenant@stacgate.academy',
                username: 'sophie_apprenant',
                firstName: 'Sophie',
                lastName: '√âtudiante',
                role: 'apprenant',
                password: 'demo123'
            },
            {
                establishmentId: createdEstablishments[0].id,
                email: 'lucas.apprenant@stacgate.academy',
                username: 'lucas_apprenant',
                firstName: 'Lucas',
                lastName: '√âtudiant',
                role: 'apprenant',
                password: 'demo123'
            },
            {
                establishmentId: createdEstablishments[1].id,
                email: 'admin@techpro.institute',
                username: 'admin_techpro',
                firstName: 'Claire',
                lastName: 'Directrice',
                role: 'admin',
                password: 'demo123'
            }
        ];

        const createdUsers = [];
        for (const user of demoUsers) {
            const hashedPassword = await bcrypt.hash(user.password, 12);
            const [created] = await db.insert(users).values({
                ...user,
                password: hashedPassword,
                isActive: true,
                emailVerifiedAt: new Date()
            }).returning();
            createdUsers.push(created);
        }

        console.log(`‚úÖ ${createdUsers.length} utilisateurs cr√©√©s`);

        console.log('üìö Cr√©ation des cours de d√©monstration...');
        
        // Cr√©er des cours de d√©monstration
        const demoCourses = [
            {
                establishmentId: createdEstablishments[0].id,
                title: 'Introduction au D√©veloppement Web',
                description: 'Apprenez les bases du d√©veloppement web avec HTML, CSS et JavaScript. Ce cours couvre les fondamentaux n√©cessaires pour cr√©er vos premi√®res pages web interactives.',
                shortDescription: 'Les bases du d√©veloppement web moderne',
                category: 'web',
                type: 'cours',
                price: '0.00',
                isFree: true,
                duration: 120,
                level: 'debutant',
                language: 'fr',
                tags: ['HTML', 'CSS', 'JavaScript', 'Web'],
                instructorId: createdUsers[1].id, // Marie Formatrice
                isPublic: true,
                isActive: true,
                rating: '4.50',
                enrollmentCount: 25
            },
            {
                establishmentId: createdEstablishments[0].id,
                title: 'React pour D√©butants',
                description: 'Ma√Ætrisez React et cr√©ez des applications web modernes. D√©couvrez les composants, le state management, les hooks et les meilleures pratiques.',
                shortDescription: 'Cr√©ation d\'applications React modernes',
                category: 'frontend',
                type: 'cours',
                price: '99.00',
                isFree: false,
                duration: 180,
                level: 'intermediaire',
                language: 'fr',
                tags: ['React', 'JavaScript', 'Frontend', 'Hooks'],
                instructorId: createdUsers[1].id, // Marie Formatrice
                isPublic: true,
                isActive: true,
                rating: '4.80',
                enrollmentCount: 15
            },
            {
                establishmentId: createdEstablishments[0].id,
                title: 'PHP et Base de Donn√©es',
                description: 'D√©veloppement backend avec PHP et gestion des bases de donn√©es MySQL. Apprenez √† cr√©er des APIs et √† g√©rer les donn√©es efficacement.',
                shortDescription: 'Backend PHP et bases de donn√©es',
                category: 'backend',
                type: 'cours',
                price: '149.00',
                isFree: false,
                duration: 200,
                level: 'intermediaire',
                language: 'fr',
                tags: ['PHP', 'MySQL', 'Backend', 'API'],
                instructorId: createdUsers[2].id, // Paul Instructeur
                isPublic: true,
                isActive: true,
                rating: '4.60',
                enrollmentCount: 12
            },
            {
                establishmentId: createdEstablishments[0].id,
                title: 'Design System et UI/UX',
                description: 'Cr√©ez des interfaces utilisateur coh√©rentes et attractives. Apprenez les principes du design, Figma, et l\'impl√©mentation de design systems.',
                shortDescription: 'Design d\'interfaces modernes',
                category: 'design',
                type: 'workshop',
                price: '75.00',
                isFree: false,
                duration: 90,
                level: 'tous',
                language: 'fr',
                tags: ['UI/UX', 'Design', 'Figma', 'Design System'],
                instructorId: createdUsers[1].id, // Marie Formatrice
                isPublic: true,
                isActive: true,
                rating: '4.70',
                enrollmentCount: 8
            }
        ];

        const createdCourses = [];
        for (const course of demoCourses) {
            const [created] = await db.insert(courses).values(course).returning();
            createdCourses.push(created);
        }

        console.log(`‚úÖ ${createdCourses.length} cours cr√©√©s`);

        console.log('üìù Cr√©ation des inscriptions...');
        
        // Cr√©er des inscriptions
        const enrollmentData = [
            { userId: createdUsers[3].id, courseId: createdCourses[0].id, progress: 75, status: 'active' },
            { userId: createdUsers[3].id, courseId: createdCourses[1].id, progress: 30, status: 'active' },
            { userId: createdUsers[4].id, courseId: createdCourses[0].id, progress: 100, status: 'completed', completedAt: new Date() },
            { userId: createdUsers[4].id, courseId: createdCourses[2].id, progress: 45, status: 'active' },
            { userId: createdUsers[4].id, courseId: createdCourses[3].id, progress: 10, status: 'active' }
        ];

        for (const enrollment of enrollmentData) {
            await db.insert(enrollments).values(enrollment);
        }

        console.log(`‚úÖ ${enrollmentData.length} inscriptions cr√©√©es`);

        console.log('üìä Cr√©ation des √©valuations...');
        
        // Cr√©er des √©valuations
        const assessmentData = [
            {
                establishmentId: createdEstablishments[0].id,
                courseId: createdCourses[0].id,
                title: 'Quiz HTML/CSS',
                description: '√âvaluation des connaissances de base en HTML et CSS',
                type: 'quiz',
                questions: [
                    {
                        question: 'Quelle balise HTML est utilis√©e pour cr√©er un lien ?',
                        type: 'multiple',
                        options: ['<link>', '<a>', '<href>', '<url>'],
                        correct: 1
                    },
                    {
                        question: 'Comment appliquer une couleur de fond rouge en CSS ?',
                        type: 'multiple',
                        options: ['color: red;', 'background-color: red;', 'bg-color: red;', 'background: red;'],
                        correct: 1
                    }
                ],
                settings: {
                    timeLimit: 30,
                    attempts: 3,
                    passingScore: 70
                },
                isActive: true
            },
            {
                establishmentId: createdEstablishments[0].id,
                courseId: createdCourses[1].id,
                title: 'Exercice React Components',
                description: 'Cr√©ation d\'un composant React fonctionnel',
                type: 'assignment',
                questions: [
                    {
                        question: 'Cr√©ez un composant React qui affiche une liste d\'√©l√©ments pass√©s en props',
                        type: 'code',
                        language: 'javascript',
                        template: 'function ItemList(props) {\n  // Votre code ici\n}'
                    }
                ],
                settings: {
                    timeLimit: 60,
                    attempts: 2,
                    passingScore: 80
                },
                isActive: true
            }
        ];

        for (const assessment of assessmentData) {
            await db.insert(assessments).values(assessment);
        }

        console.log(`‚úÖ ${assessmentData.length} √©valuations cr√©√©es`);

        console.log('üë• Cr√©ation des groupes d\'√©tude...');
        
        // Cr√©er des groupes d'√©tude
        const studyGroupData = [
            {
                establishmentId: createdEstablishments[0].id,
                name: 'Groupe Web D√©butants',
                description: 'Entraide pour les d√©butants en d√©veloppement web',
                maxMembers: 15,
                isPublic: true,
                createdBy: createdUsers[1].id // Marie Formatrice
            },
            {
                establishmentId: createdEstablishments[0].id,
                name: 'React Avanc√©',
                description: 'Discussions et projets autour de React',
                maxMembers: 10,
                isPublic: true,
                createdBy: createdUsers[2].id // Paul Instructeur
            }
        ];

        for (const group of studyGroupData) {
            await db.insert(studyGroups).values(group);
        }

        console.log(`‚úÖ ${studyGroupData.length} groupes d'√©tude cr√©√©s`);

        console.log('üîî Cr√©ation des notifications...');
        
        // Cr√©er des notifications de d√©monstration
        const notificationData = [
            {
                userId: createdUsers[3].id, // Sophie
                establishmentId: createdEstablishments[0].id,
                title: 'Bienvenue sur StacGate Academy !',
                message: 'D√©couvrez nos cours et commencez votre apprentissage d√®s aujourd\'hui.',
                type: 'welcome',
                isRead: false,
                data: {}
            },
            {
                userId: createdUsers[4].id, // Lucas
                establishmentId: createdEstablishments[0].id,
                title: 'F√©licitations pour votre premier cours termin√© !',
                message: 'Vous avez termin√© "Introduction au D√©veloppement Web" avec succ√®s.',
                type: 'achievement',
                isRead: false,
                data: { courseId: createdCourses[0].id }
            }
        ];

        for (const notification of notificationData) {
            await db.insert(notifications).values(notification);
        }

        console.log(`‚úÖ ${notificationData.length} notifications cr√©√©es`);

        console.log();
        console.log('üéâ Donn√©es de d√©monstration install√©es avec succ√®s !');
        console.log();
        console.log('üìä R√©sum√© :');
        console.log(`  üè¢ ${createdEstablishments.length} √©tablissements`);
        console.log(`  üë• ${createdUsers.length} utilisateurs`);
        console.log(`  üìö ${createdCourses.length} cours`);
        console.log(`  üìù ${enrollmentData.length} inscriptions`);
        console.log(`  üìä ${assessmentData.length} √©valuations`);
        console.log(`  üë• ${studyGroupData.length} groupes d'√©tude`);
        console.log(`  üîî ${notificationData.length} notifications`);
        console.log();
        console.log('üë§ Comptes de test disponibles :');
        console.log('  üìß admin@stacgate.academy / demo123 (Administrateur)');
        console.log('  üìß marie.formateur@stacgate.academy / demo123 (Formateur)');
        console.log('  üìß sophie.apprenant@stacgate.academy / demo123 (Apprenant)');
        console.log();

    } catch (error) {
        console.error('‚ùå Erreur lors de l\'installation des donn√©es de d√©mo:', error.message);
        console.error('D√©tails:', error);
        process.exit(1);
    } finally {
        if (client) {
            client.release();
        }
    }
}

seedDemoData();